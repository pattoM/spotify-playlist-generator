from flask import Flask, render_template, redirect, url_for, jsonify , session, request
from config import Config 
import requests 
from datetime import datetime 
import json 


#flask app instance 
app = Flask(__name__)

#config app 
app.config.from_object(Config)


#helper functions below. 

def gen_recommendations(payload, token):
    """
    Use spotify recommendation api to get recommendations to show to user. The seed artist is marshmello and seed track is song happier by marshmello
    """

    #divide by 10 to reduce ranges to 0.1 to 1. This is because the html slider element only takes integer values and in increments of 1 
    
    query = f"https://api.spotify.com/v1/recommendations?limit={payload['track-count']}&market=US&seed_genres={payload['seed-genre']}&target_danceability={int(payload['danceability'])/10}&target_valence={int(payload['valence'])/10}&target_energy={int(payload['energy']) /10}"
    query += f'&seed_artists=64KEffDW9EtZ1y2vBYgq8T' # default marshmello
    query += f'&seed_tracks=2dpaYNEQHiRxtZbfNsse99'   # happier by marshmello

    response = requests.get(query, headers={"Content-Type":"application/json", "Authorization": "Bearer " + f"{token}"}) 


    parsed_response = response.json()


    return parsed_response['tracks']

    
def create_playlist(username,token, uris, name):
    """
    Use the user provided uris to save playlist 

    """

    # creates new playlist first
    endpoint_url = f"https://api.spotify.com/v1/users/{username}/playlists" 
    payload = {
            "name": "Autogenerated Playlist",
            "description": "Spotify Playlist Generator",
            "public": False
            }
    if name is not None:
        if len(name) > 0:
            payload.update({"name":name})

    request_body = json.dumps(payload)
    

    response = requests.post(url = endpoint_url, data = request_body, headers={"Content-Type":"application/json", 
                            "Authorization": "Bearer " + f"{token}"})

    url = response.json()['external_urls']['spotify']


    playlist_id = response.json()['id']

    #update the playlist with tracks
    endpoint_url = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks"

    request_body = json.dumps({
            "uris" : json.loads(uris)
            })
    response = requests.post(url = endpoint_url, data = request_body, headers={"Content-Type":"application/json", 
                            "Authorization":f"Bearer {token}"})
    print(response)
    if 200 <= response.status_code <= 299:
        return True 
    else:
        return False 



#routes here 
@app.route("/", methods=['GET'])
def login():
    """
    On visiting the landing page, the user is prompted to login with their spotify account. Access token and refresh token from spotify are 
    stored in session and used as needed. Session cookies in flask are cryptographically signed, so secret stuff stay safe 

    """

    #spotify oauth2 login url 
    url = f"https://accounts.spotify.com/authorize?response_type=code&client_id={app.config['SPOTIFY_CLIENT_ID']}&scope=playlist-modify-private&redirect_uri=https%3A%2F%2Fsample-playlist-generator.herokuapp.com%2Fspotify-oauth2callback"

    #checking if the user is logged in by checking values in session 
    if 'access_token' not in session or 'refresh_token' not in session or 'token_create' not in session:
        #pop everything from session - incase one is missing for any reason 
        session.pop('access_token', None)
        session.pop('refresh_token', None)
        session.pop('token_create', None)
        session.pop('spotify_username', None)
        
        return redirect(url)
    
    #extract spotify access token , refresh token , token create time from session 
    sess_access_token, sess_refresh_token, sess_token_create_time = session.get("access_token", None) , session.get('refresh_token', None), session.get('token_create', None)

    #Incase token is expired, refresh token using spotify api endpoint and update session cookie with new access token 
    if (datetime.utcnow() - sess_token_create_time).total_seconds() > 3500:
        ref_url = "https://accounts.spotify.com/api/token"
        headers = {"Content-Type":"application/x-www-form-urlencoded"}
        payload = {"grant_type":"refresh_token","refresh_token":sess_refresh_token}
        resp = requests.post(url, headers=headers, data=payload, auth=requests.auth.HTTPBasicAuth(app.config['SPOTIFY_CLIENT_ID'], app.config['SPOTIFY_CLIENT_SECRET']))
        
        if 200 <= resp.status_code <= 299:
            parsed_resp = resp.json()
            session['access_token'] = parsed_resp['access_token']

        else:
            return redirect(url)

    
    return render_template("index.html")

@app.route("/get-recommended-playlist", methods=["POST"])
def get_rec_playlist():
    """
    Endpoint to be called via AJAX/fetch 
    Use user specified values to generate custom playlist recommendations from the api
    """

    #get spotify creds from the session object
    sess_access_token, sess_refresh_token, sess_token_create_time = session.get("access_token", None) , session.get('refresh_token', None), session.get('token_create', None)

    if not sess_access_token or not sess_refresh_token or not sess_token_create_time:
        return "error, missing token", 403 # on the frontend, errors from the api call will trigger a page reload 

    if (datetime.utcnow() - sess_token_create_time).total_seconds() > 3500:
        return "error, expired token", 400

    #get json data from request 
    data = request.get_json()

    #fetch recommended tracks and return to user 
    tracks = gen_recommendations(data, sess_access_token)
    uris = [i['uri'] for i in tracks] 
    resp_dict = {
        "songs":tracks,
        "uris": json.dumps(uris)
    }
    return jsonify(resp_dict) 

@app.route('/save-private-playlist', methods=['POST'])
def create_private_playlist():
    """
    Get the filtered playlist from the user via fetch and then use access token in session to save playlist.
    """

    #get spotify creds from session. 
    sess_access_token, sess_refresh_token, sess_token_create_time, sess_username = session.get("access_token", None) , session.get('refresh_token', None), session.get('token_create', None), session.get('spotify_username', None)

    if not sess_access_token or not sess_refresh_token or not sess_token_create_time or not sess_username:
        return "error, missing token", 403  

    if (datetime.utcnow() - sess_token_create_time).total_seconds() > 3500:
        return "error, expired token", 400

    #get json data from request 
    data = request.get_json()
    status = create_playlist(sess_username, sess_access_token, data['uris'], data['name'])

    if not status:
        return "Error creating playlist", 400
    else:
        return "Success creating playlist",200


@app.route('/spotify-oauth2callback', methods=['GET'])
def spotify_oauth2callback():
    """
    Complete the spotify oauth2 flow as per spotify docs. 
    Get the code from the url parameters and exchange that for access token which is saved in the session 
    """

    #get code from request args
    code = request.args.get('code', None)

    if not code:
        return redirect(url_for('login')) 

    #get the access token and refresh token for this user 
    url = "https://accounts.spotify.com/api/token"
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    payload = {
        "grant_type":"authorization_code",
        "code":code,
        "redirect_uri":"https://sample-playlist-generator.herokuapp.com/spotify-oauth2callback"
    }

    resp = requests.post(url, headers=headers, data=payload, auth=requests.auth.HTTPBasicAuth(app.config['SPOTIFY_CLIENT_ID'], app.config['SPOTIFY_CLIENT_SECRET']))
    print(resp.text)
    if 200 <= resp.status_code <= 299:
        parsed_resp = resp.json()
        #save the access and refresh tokens to session 
        session['token_create'] = datetime.utcnow()
        session['access_token'] = parsed_resp['access_token']
        session['refresh_token'] = parsed_resp['refresh_token'] 
         

        #get the user id to be used in playlist creation 
        profile_endpoint = "https://api.spotify.com/v1/me"
        headers = {"Authorization": f"Bearer {parsed_resp['access_token']}"}
        resp = requests.get(profile_endpoint, headers=headers) 
        json_resp = resp.json()
        session['spotify_username'] = json_resp['id']
        session.permanent = True

        return redirect(url_for('login'))
         
    else:
        return "Error during authentication", 200

@app.route('/logout', methods=['GET'])
def logout():
    """
    Pop all values from the session and return  static text as the result. 
    """

    #if session has data, pop everything
    session.pop('access_token', None)
    session.pop('refresh_token', None)
    session.pop('token_create', None)
    session.pop('spotify_username', None)

    return "Logged out!"